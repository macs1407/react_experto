{"version":3,"sources":["types/types.js","components/calendar/CalendarModal.js","components/calendar/CalendarScreen.js","reducers/uiReducer.js","reducers/calendarReducer.js","reducers/authReducer.js","reducers/rootReducer.js","store/store.js","CalendarApp.js","index.js"],"names":["types","Modal","setAppElement","now","moment","minutes","seconds","add","nowEnd","date","toDate","locale","momentLocalizer","initialState","modalOpen","events","activeEvent","checking","rootReducer","combineReducers","ui","state","action","type","calendar","console","log","payload","map","event","id","filter","auth","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","CalendarApp","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"iOAAaA,G,iBACG,mBADHA,EAEI,mBAFJA,EAIO,qBAJPA,EAKG,iBALHA,EAOI,kBAPJA,EAQc,sBARdA,EASO,mBATPA,EAUS,uBAVTA,EAWM,6BAXNA,EAaW,4BAbXA,EAeE,eAfFA,EAkBG,gB,sECIhBC,IAAMC,cAAc,SAEpB,IAAMC,EAAMC,MAASC,QAAQ,GAAGC,QAAQ,GAAGC,IAAI,EAAG,SAC5CC,EAASJ,MAASC,QAAQ,GAAGC,QAAQ,GAAGC,IAAI,EAAG,SAK1CJ,EAAIM,OACND,EAAOE,SChBhBN,IAAOO,OAAO,MAEIC,YAAgBR,K,MAAlC,I,gBCfMS,EAAe,CACjBC,WAAU,G,QCFRD,EAAe,CACjBE,OAAO,GACPC,YAAY,MCDVH,EAAe,CACjBI,UAAU,GCEDC,EAAcC,YAAgB,CACvCC,GHAqB,WAAiC,IAAhCC,EAA+B,uDAAvBR,EAAcS,EAAS,uCACrD,OAAOA,EAAOC,MACV,KAAKvB,EACD,OAAO,2BACAqB,GADP,IAEIP,WAAU,IAElB,KAAKd,EACD,OAAO,2BACAqB,GADP,IAEIP,WAAU,IAElB,QACI,OAAOO,IGZfG,SFD2B,WAAiC,IAAhCH,EAA+B,uDAAvBR,EAAcS,EAAS,uCAE3D,OADAG,QAAQC,IAAIJ,EAAOC,MACZD,EAAOC,MACV,KAAKvB,EACD,OAAO,2BACAqB,GADP,IAEIL,YAAYM,EAAOK,UAE3B,KAAK3B,EACD,OAAO,2BACAqB,GADP,IAGIN,OAAO,GAAD,mBACCM,EAAMN,QADP,CAEFO,EAAOK,YAGnB,KAAK3B,EACD,OAAO,2BACAqB,GADP,IAEIL,YAAY,OAEpB,KAAKhB,EACD,OAAO,2BACAqB,GADP,IAEIN,OAAQM,EAAMN,OAAOa,KAAI,SAAAC,GAAK,OAAKA,EAAMC,KAAOR,EAAOK,QAAQG,GAAIR,EAAOK,QAAUE,OAG5F,KAAK7B,EACD,OAAO,2BACAqB,GADP,IAGIN,OAAQM,EAAMN,OAAOgB,QAAO,SAAAF,GAAK,OAAIA,EAAMC,KAAOT,EAAML,YAAYc,MACpEd,YAAY,OAEpB,KAAKhB,EACD,OAAO,2BACAqB,GADP,IAEIN,OAAO,YAAKO,EAAOK,WAG3B,KAAK3B,EACD,OAAO,eACDa,GAEV,QACI,OAAOQ,IE5CfW,KDAuB,WAAiC,IAAhCX,EAA+B,uDAAvBR,EAAcS,EAAS,uCACvD,OAAOA,EAAOC,MACV,KAAKvB,EACD,OAAO,2BACAqB,GADP,IAEIJ,UAAS,GACNK,EAAOK,SAElB,KAAK3B,EACD,OAAO,2BACAqB,GADP,IAEIJ,UAAS,IAEjB,KAAKjB,EAED,OADAyB,QAAQC,IAAI,KACL,CACHT,UAAS,GAEjB,QACI,OAAOI,MEvBbY,EAAsC,qBAAXC,QAA0BA,OAAOC,sCAAyCC,ICC9FC,GDCQC,YAAYpB,EACDe,EAAiBM,YAAiBC,OCFvC,c,OCA3BC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.19f41410.chunk.js","sourcesContent":["export const types = {\n    uiOpenModal:'[ui open modal]',\n    uiCloseModal:'[ui close modal]',\n    // Accciones\n    eventSetActive: '[event] set active',\n    eventLoaded:'[event] loades',\n    eventStartAddNew : '[event] start add new',\n    eventAddNew: '[event] add new',\n    eventClearActiveEvent: '[event] clear event',\n    eventEditEvent: '[event] edit new',\n    eventDeleteEvent: '[event] delete event',\n    eventClearAll: '[event] clear event logout',\n    // Autenticacion\n    authCheckingFinish: '[auth] login state finish',\n    authStartLogin: '[auth] start login',\n    authLogin: '[auth] login',\n    authRegister: '[auth] start register',\n    authStartTokenRenew: '[auth] renew',\n    authLogout: '[auth] logout',\n};","import React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport DateTimePicker from 'react-datetime-picker';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport Swal from 'sweetalert2';\nimport { uiCloseModal } from '../../actions/ui';\nimport {startAddNew, eventClearActiveEvent, eventStartUpdate} from '../../actions/events';\nimport { useEffect } from 'react';\n\nconst customStyles = {\n    content : {\n      top                   : '50%',\n      left                  : '50%',\n      right                 : 'auto',\n      bottom                : 'auto',\n      marginRight           : '-50%',\n      transform             : 'translate(-50%, -50%)'\n    }\n};\n\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\nModal.setAppElement('#root');\n\nconst now = moment().minutes(0).seconds(0).add(1, 'hours');\nconst nowEnd = moment().minutes(0).seconds(0).add(2, 'hours');\n\nconst initEvent = {\n    title:'',\n    notes:'',\n    start: now.date(),\n    end: nowEnd.toDate()\n}\n\nexport const CalendarModal = () => {\n\n    const dispatch = useDispatch();\n    // Estar pendiente del store\n    const {modalOpen} = useSelector(state => state.ui);\n    const {activeEvent} = useSelector(state => state.calendar);\n\n    const [dateStart, setDateStart] = useState(now.toDate());\n    const [dateEnd, setDateEnd] = useState(nowEnd.toDate());\n\n    const [formValues, setFormValues] = useState(initEvent);\n\n    const {title, notes, start, end} = formValues;\n\n    const handleInputChange = ({target})=>{\n        setFormValues({\n            ...formValues,\n            [target.name]:target.value\n        });\n    }\n\n    const handleStartDateChange = (e)=>{\n        setDateStart(e);\n        setFormValues({\n            ...formValues,\n            start:e\n        });\n    }\n\n    const handleEndDateChange = (e)=>{\n        setDateEnd(e);\n        setFormValues({\n            ...formValues,\n            end:e\n        });\n    }\n\n    const handleSubmitForm = (e)=>{\n        e.preventDefault();\n        // Trabajarlo como instancia de momemt\n        let momentStart = moment(start);\n        let momentEnd = moment(end);\n        if(momentStart.isSameOrAfter(momentEnd)){\n            Swal.fire('Error', 'La fecha fin debe ser mayor a la incial', 'error');\n            return;\n        }\n        if(title.trim().length < 2){\n            Swal.fire('Error', 'El titulo debe tener mas de 2 caracteres', 'error');\n            return;\n        }\n        // Si no hay una accion de event, entonces es nuevo\n        if(!activeEvent){\n            dispatch(startAddNew({...formValues}));\n        } else {\n            dispatch(eventStartUpdate(formValues));\n        }\n        \n        // Realizar grabacion en base de datos\n        cerrarModal();\n    }\n\n    const cerrarModal = ()=>{\n        setFormValues(initEvent);\n        // Cerrar el modal\n        dispatch(eventClearActiveEvent());\n        dispatch(uiCloseModal());\n    }\n\n    useEffect(() => {\n       if(activeEvent){\n           // Setear los valores del evento activo al formulario\n           setFormValues(activeEvent);\n       } else {\n           // Si el evento activo esta nulo se restablecen los valores por defecto del formulario\n           setFormValues(initEvent);\n       }\n    }, [activeEvent, setFormValues])\n\n    return (\n        <Modal\n          isOpen={modalOpen}\n          //onAfterOpen={afterOpenModal}\n          onRequestClose={cerrarModal}\n          style={customStyles}\n          closeTimeoutMS={200}\n          className=\"modal\"\n          overlayClassName=\"modal-fondo\"\n        >\n            {\n                (activeEvent)?(<h1> Editar evento </h1>):(<h1> Nuevo evento </h1>)\n            }\n            \n            <hr />\n            <form className=\"container\" onSubmit={handleSubmitForm}>\n\n                <div className=\"form-group\">\n                    <label>Fecha y hora inicio</label>\n                    <DateTimePicker\n                        onChange={handleStartDateChange}\n                        value={dateStart}\n                        className=\"form-control\"\n                    />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Fecha y hora fin</label>\n                    <DateTimePicker\n                        onChange={handleEndDateChange}\n                        value={dateEnd}\n                        minDate={dateStart}\n                        className=\"form-control\"\n                    />\n                </div>\n\n                <hr />\n                <div className=\"form-group\">\n                    <label>Titulo y notas</label>\n                    <input \n                        type=\"text\" \n                        className=\"form-control\"\n                        placeholder=\"Título del evento\"\n                        name=\"title\"\n                        value={title}\n                        onChange={handleInputChange}\n                        autoComplete=\"off\"\n                    />\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Una descripción corta</small>\n                </div>\n\n                <div className=\"form-group\">\n                    <textarea \n                        type=\"text\" \n                        className=\"form-control\"\n                        placeholder=\"Notas\"\n                        rows=\"5\"\n                        name=\"notes\"\n                        value={notes}\n                        onChange={handleInputChange}\n                    ></textarea>\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Información adicional</small>\n                </div>\n\n                <button\n                    type=\"submit\"\n                    className=\"btn btn-outline-primary btn-block\"\n                >\n                    <i className=\"far fa-save\"></i>\n                    <span> Guardar</span>\n                </button>\n\n            </form>\n        </Modal>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Navbar } from '../ui/Navbar';\nimport {Calendar, momentLocalizer} from 'react-big-calendar';\nimport moment from 'moment';\nimport 'moment/locale/es'\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { messages } from '../../helpers/calendar-messages';\nimport { CalendarEvent } from './CalendarEvent';\nimport { CalendarModal } from './CalendarModal';\nimport { uiOpenModal } from '../../actions/ui';\nimport { eventSetActive, eventClearActiveEvent, eventStartLoading } from '../../actions/events';\nimport { AddNewFab } from '../ui/AddNewFab';\nimport { DeleteEventFab } from '../ui/DeleteEventFab';\n\nmoment.locale('es');\n\nconst localizer = momentLocalizer(moment);\n\nexport const CalendarScreen = () => {\n\n    const dispatch = useDispatch();\n    // Traer los eventos de acuerdo a lo que este en el store, mas preciso el calendar\n    const {events, activeEvent} = useSelector(state => state.calendar);\n\n    const {uid} = useSelector(state => state.auth);\n\n   // const [lastView, setLastView] = useState((localStorage.getItem('lastView') || 'mont') || '');\n    const [lastView, setLastView] = useState( localStorage.getItem('lastView') || 'month' );\n\n    const onDoubleClick = (e)=>{\n        dispatch(uiOpenModal());\n    }\n\n    const onSelectEvent = (e)=>{\n        dispatch(eventSetActive(e));\n    }\n\n    const onSelectSlot = ()=>{\n        dispatch(eventClearActiveEvent());\n    }\n\n    // Guardar en el local storage la ultima pestaña que se visito\n    const onViewChange = (e) => {\n        setLastView(e);\n        localStorage.setItem('lastView', e);\n    }\n    \n\n    const eventStyleGetter = (event, start, end, isSelected)=>{\n        const style = {\n            backgroundColor:(uid === event.user._id) ? '#367CF7' : '#465660',\n            borderRadius:'0px',\n            opacity:0.8,\n            display:'block',\n            color:'white'\n        }\n        return {\n            style        \n        }\n    }\n\n    // Cargar los eventos al cargar el componente\n    useEffect(() => {\n       dispatch(eventStartLoading());\n    }, [dispatch])\n\n    return (\n        <div className=\"calendar-screen\">\n            <Navbar />\n\n            <Calendar\n                localizer={ localizer }\n                events={ events }\n                startAccessor=\"start\"\n                endAccessor=\"end\"\n                messages={ messages }\n                eventPropGetter={ eventStyleGetter }\n                onDoubleClickEvent={ onDoubleClick }\n                onSelectEvent={ onSelectEvent }\n                onView={ onViewChange }\n                onSelectSlot={ onSelectSlot }\n                selectable={ true }\n                view={ lastView }\n                components={{\n                    event: CalendarEvent\n                }}\n            />\n            {\n                (activeEvent) && (<DeleteEventFab />)\n            }\n            <AddNewFab />\n            <CalendarModal />\n        </div>\n    )\n}\n","import { types } from \"../types/types\";\n\nconst initialState = {\n    modalOpen:false\n}\n\nexport const uiReducer = (state = initialState, action)=>{\n    switch(action.type){\n        case types.uiOpenModal:\n            return {\n                ...state,\n                modalOpen:true\n            };\n        case types.uiCloseModal:\n            return {\n                ...state,\n                modalOpen:false\n            }\n        default:\n            return state;\n    }\n}","import { types } from '../types/types';\nconst initialState = {\n    events:[],\n    activeEvent:null\n}\n\nexport const calendarReducer = (state = initialState, action)=>{\n    console.log(action.type);\n    switch(action.type){\n        case types.eventSetActive:\n            return {\n                ...state,\n                activeEvent:action.payload\n            }\n        case types.eventAddNew:\n            return {\n                ...state,\n                // ...state.events guardar los eventos anteriores y enviar el nuevo action.payload\n                events:[\n                    ...state.events,\n                    action.payload\n                ]\n            }\n        case types.eventClearActiveEvent:\n            return {\n                ...state,\n                activeEvent:null\n            }\n        case types.eventEditEvent: {\n            return {\n                ...state,\n                events: state.events.map(event => (event.id === action.payload.id)?action.payload : event)\n            }\n        }\n        case types.eventDeleteEvent:\n            return {\n                ...state,\n                // Devolver todos los eventos menos el que este activo\n                events: state.events.filter(event => event.id !== state.activeEvent.id),\n                activeEvent:null\n            }\n        case types.eventLoaded:{\n            return {\n                ...state,\n                events: [...action.payload]\n            }\n        }\n        case types.eventClearAll:\n            return {\n               ...initialState\n            }\n        default:\n            return state;\n    }\n}","import { types } from \"../types/types\";\n\nconst initialState = {\n    checking: true,\n    // uid: null,\n    // name: null\n}\n\nexport const authReducer = (state = initialState, action)=>{\n    switch(action.type){\n        case types.authLogin:\n            return {\n                ...state,\n                checking:false,\n                ...action.payload\n            }\n        case types.authCheckingFinish:\n            return {\n                ...state,\n                checking:false\n            }\n        case types.authLogout:\n            console.log('1');\n            return {\n                checking:false\n            }\n        default:\n            return state;\n    }\n}\n","import {combineReducers} from 'redux';\nimport { uiReducer } from './uiReducer';\nimport { calendarReducer } from './calendarReducer';\nimport { authReducer } from './authReducer';\n// Objeto que tiene todo el estore de los diferentes reducers\nexport const rootReducer = combineReducers({\n    ui:uiReducer,\n    calendar: calendarReducer,\n    auth: authReducer\n});","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from '../reducers/rootReducer';\n\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n // El applyMiddleware sirve para hacer peticion asincronicas\nexport const store = createStore(rootReducer,\n                                composeEnhancers(applyMiddleware( thunk ))\n                                );","import React from 'react';\nimport { AppRouter } from './router/AppRouter';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nexport const CalendarApp = () => {\n    return (\n        /* Proveer toda la informacion en el arbo atravez del provider y utilizamos nuestro STORE que es donde \n        esta todos los reducer*/\n        <Provider store={store}>            \n            <AppRouter />\n        </Provider>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CalendarApp } from './CalendarApp';\nimport './styles.css';\n\nReactDOM.render(\n  <CalendarApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}