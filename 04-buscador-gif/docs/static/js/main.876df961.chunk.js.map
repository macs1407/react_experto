{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","title","GridItem","className","src","alt","GifDrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","image","key","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"yMAmCeA,EAhCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAiBrC,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAG,OAAGP,GAAH,mBAAkBO,OACnCN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EAExB,MAAO,CACHC,GAAID,EAAIC,GACRT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,IAClCY,MAAOJ,EAAII,UAVA,kBAabN,GAba,4CAAH,sDCWLO,EATE,SAAC,GAAkB,IAAjBD,EAAgB,EAAhBA,MAAOZ,EAAS,EAATA,IACtB,OACI,yBAAKc,UAAU,6BACX,yBAAKC,IAAKf,EAAKY,MAAOA,EAAOI,IAAKJ,IAClC,2BAAIA,KCiBDK,EAnBC,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,UAAe,ECCL,SAACA,GAAa,IAAD,EACXd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAHyB,mBAC9BC,EAD8B,KACvBC,EADuB,KAoBrC,OAZAC,qBAAU,WACNxB,EAAQC,GAAWwB,MAAK,SAAAC,GACpBC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAEd,UAGP,CAACpB,IAEGqB,EDnBwBM,CAAa3B,GAAhCY,EAFiB,EAEtBL,KAAaa,EAFS,EAETA,QAEpB,OACI,oCACI,4BAAKpB,GACJoB,GAAW,0CACZ,yBAAKJ,UAAU,aAEPJ,EAAOH,KAAI,SAAAmB,GAAK,OACZ,kBAAC,EAAD,eAAUlB,IAAKkB,EAAOC,IAAKD,EAAMjB,IAAQiB,UEiBlDE,EA5BM,WACjB,IADuB,EAEa5C,mBADZ,CAAC,SADF,mBAEhB6C,EAFgB,KAEJ9C,EAFI,KAWvB,OACI,oCACI,gDACA,6BAEA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BAEQ8C,EAAWtB,KAAI,SAAAT,GACX,OAAO,kBAAC,EAAD,CAAS6B,IAAK7B,EAAWA,UAAWA,UCnBnEgC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.876df961.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategorias}) => {\n    // Variable para el input\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e)=>{\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        if(inputValue.trim().length > 2) {\n            // Pasarle una categoria a la funcion setCategorias de GiExpertApp\n            setCategorias(cat=>[inputValue, ...cat]);\n            setInputValue('');\n        }\n    }\n\n    return ( \n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n    );\n}\n\nAddCategory.propTypes = {\n    setCategorias: PropTypes.func.isRequired\n}\n \nexport default AddCategory;","export const getGifs = async(categoria)=>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=ek0WEVmwafRHD0D19BP1hBQIOHqdXPcW`;\n    const resp = await fetch(url);\n    // Convertir el objeto a json y hacer destrcuturacion para solo traer del objeto la data\n    const {data} = await resp.json();\n    const gifs = data.map(img =>{\n        // Se itera sobre el arreglo y el RETURN hace la transformacion de lo que vamos a regresar\n        return {\n            id: img.id,\n            url: img.images?.downsized_medium.url,\n            title: img.title,\n        }\n    })\n   return gifs;\n}","import React from 'react';\n\nconst GridItem = ({title, url}) => {\n    return ( \n        <div className=\"card animate__bounceOutUp\">\n            <img src={url} title={title} alt={title}/>\n            <p>{title}</p>\n        </div>\n     );\n}\n \nexport default GridItem;","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GridItem from './GridItem';\n\nconst GifDrid = ({categoria}) => {\n\n    const {data:images, loading} = useFetchGifs(categoria);\n\n    return (\n        <>\n            <h2>{categoria}</h2>  \n            {loading && <p>Cargando...</p>}\n            <div className=\"card-grid\">            \n                { // Si no se ponen las llaves y se pone () se refiere a un retorno implicito\n                    images.map(image =>(\n                        <GridItem img={image} key={image.id} {...image}/>   \n                    ))\n                }\n            </div>\n        </>\n    );\n}\n \nexport default GifDrid;","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\n// Un custom hook no es mas que una funcion\nexport const useFetchGifs = (categoria)=>{\n    const [state, setState] = useState({\n        data:[],\n        loading:true,\n    });\n\n    // Se ejecuta cuando haya un cambio sobre una lista de dependencias si no se le envia nada en [] solo se ejecutara\n    // Una vez cuando el componente se renderiza\n    useEffect(() => {\n        getGifs(categoria).then(imgs=>{\n            setTimeout(()=>{\n                setState({\n                    data:imgs,\n                    loading:false\n                });\n            },3000);\n          \n        });\n    }, [categoria]);\n\n    return state;\n}","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifDrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    const listaCategorias = ['Goku'];\n    const [categorias, setCategorias] = useState(listaCategorias);\n\n    //const handleUp = ()=>{\n        // Con los tres puntos indicamos que pasamos una copia del del arreglo actual\n        // [...categorias, 'aaa'] agregar de ultimo\n        // ['aaa', ...categorias] agrega de primero\n        //setCategorias([...categorias, 'aaa']);\n    //}\n\n    return ( \n        <>\n            <h2>Buscador de gifs</h2>\n            <hr />\n            {/* <button onClick={handleUp}>Agregar</button> */}\n            <AddCategory setCategorias={setCategorias}/>\n            <ol>\n                {\n                    categorias.map(categoria=>{\n                        return <GifDrid key={categoria} categoria={categoria} />\n                    })\n                }\n            </ol>\n        </>\n     );\n}\n \nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GiExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}